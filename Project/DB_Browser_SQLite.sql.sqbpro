--Returns with No Original Receipt:
SELECT E.EmployeeID, E.Name AS EmployeeName, COUNT(*) AS NumReturns
FROM Return R
JOIN Employee E ON R.EmployeeID = E.EmployeeID
WHERE R.IsReceiptPresent = 0
GROUP BY R.EmployeeID, E.Name
HAVING NumReturns > 1;


--Returns with Debit/Credit Card Refund and No Original Receipt
SELECT E.EmployeeID, E.Name AS EmployeeName, COUNT(*) AS NumReturnsWithoutReceipt
FROM Return R
JOIN Employee E ON R.EmployeeID = E.EmployeeID
JOIN Customer C ON R.CustomerID = C.CustomerID
WHERE R.IsReceiptPresent = 0 AND C.CreditCardNum IS NOT NULL
GROUP BY E.EmployeeID, E.Name;


-- Returns Processed by each employee Without Receipts and with Credit Card Transactions
SELECT E.EmployeeID, E.Name, 
       SUM(CASE WHEN R.IsReceiptPresent = 'False' THEN 1 ELSE 0 END) AS ReturnsWithoutReceipts,
       SUM(CASE WHEN C.CreditCardNum IS NOT NULL THEN 1 ELSE 0 END) AS CreditCardTransactions
FROM Employee E
LEFT JOIN Return R ON E.EmployeeID = R.EmployeeID
LEFT JOIN Customer C ON R.CustomerID = C.CustomerID
GROUP BY E.EmployeeID, E.Name;


-- Returns Processed with Different Employee IDs but Same Customer Information
SELECT C.CustomerName, C.Street, C.City, C.State, C.CustomerPhone, COUNT(DISTINCT R.EmployeeID) AS NumEmployees
FROM Return R
JOIN Customer C ON R.CustomerID = C.CustomerID
GROUP BY C.CustomerName, C.Street, C.City, C.State, C.CustomerPhone
HAVING NumEmployees > 1;


-- Returns Processed with Unusually High Return Price
SELECT ReturnId, ReturnPrice
FROM Return
WHERE ReturnPrice > (SELECT AVG(ReturnPrice) * 2 FROM Return);


-- Returns Processed with Unusually High Number of Transactions per Employee
SELECT EmployeeID, COUNT(*) AS NumTransactions
FROM Return
GROUP BY EmployeeID
HAVING COUNT(*) > (SELECT AVG(NumTransactions) * 2 FROM (SELECT EmployeeID, COUNT(*) AS NumTransactions FROM Return GROUP BY EmployeeID) AS T);